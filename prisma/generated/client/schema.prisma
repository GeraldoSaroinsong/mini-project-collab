generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  username     String  @unique
  password     String
  phone        String? @unique
  role         Role    @default(user)
  image        String?
  referralCode String  @unique

  // PENGGUNAAN REFERRAL CODE
  usingReferralCode String?
  referralCodeUsed  User?   @relation("UseReferralCode", fields: [usingReferralCode], references: [referralCode])
  usedBy            User[]  @relation("UseReferralCode")

  // Sistem Poin dan Coupon
  pointBalance    Int        @default(0)
  expiredDates    DateTime[]
  coupon          Boolean    @default(false)
  couponExpiredAt DateTime?

  // Atribut Organizer
  organizationName    String? @unique
  organizationEmail   String? @unique
  organizationPhone   String? @unique
  organizationAddress String? @unique

  // Relasi
  events       Event[]       @relation("EventOrganizer")
  transactions Transaction[] @relation("UserTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Role {
  user
  organizer
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  desc        String
  isPaidEvent Boolean
  price       Int?
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  image       String

  // ? Relasi
  id_organizer Int
  organizer    User @relation("EventOrganizer", fields: [id_organizer], references: [id])

  id_city Int
  city    City @relation("EventCity", fields: [id_city], references: [id])

  id_category Int
  category    Category @relation("EventCategory", fields: [id_category], references: [id])

  promotions   Promotion[]   @relation("EventPromotions")
  transactions Transaction[] @relation("EventTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ratings Rating[] @relation("eventrating",fields: [transactions],references: [rating])

  @@map("events")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @default("Kategori")

  events Event[] @relation("EventCategory")

  @@map("categories")
}

// model CategoriesOnEvents {
//   id_event Int
//   event    Event @relation("EventCategories", fields: [id_event], references: [id])

//   id_category Int
//   category    Category @relation("CategoryEvents", fields: [id_category], references: [id])

//   @@id([id_event, id_category])
// }

model City {
  id   Int    @id @default(autoincrement())
  name String @default("Kota")

  events Event[] @relation("EventCity")

  @@map("cities")
}

model Promotion {
  id             Int      @id @default(autoincrement())
  name           String
  discountAmount Int      @default(10)
  quantity       Int      @default(0)
  startDate      DateTime @default(now())
  endDate        DateTime @default(now())

  status Boolean @default(true)

  id_event     Int
  event        Event         @relation("EventPromotions", fields: [id_event], references: [id])
  transactions Transaction[] @relation("PromotionTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promotions")
}

model Transaction {
  id                   Int               @id @default(autoincrement())
  quantity             Int               @default(1)
  subtotal             Int
  referralCouponIsUsed Boolean           @default(false)
  pointsUsed           Int               @default(0)
  total                Int
  status               TransactionStatus @default(process)

  id_user      Int
  user         User       @relation("UserTransactions", fields: [id_user], references: [id])
  id_event     Int
  event        Event      @relation("EventTransactions", fields: [id_event], references: [id])
  id_promotion Int?
  promotion    Promotion? @relation("PromotionTransactions", fields: [id_promotion], references: [id])

  payment Payment? @relation("TransactionPayment")
  rating  Rating?  @relation("TransactionRating")

  createdAt DateTime @default(now())
  expiredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

enum TransactionStatus {
  success
  process
  failed
}

model Rating {
  id     Int     @id @default(autoincrement())
  rating Int     @default(0)
  review String?
  image  String?

  id_transaction Int         @unique
  transaction    Transaction @relation("TransactionRating", fields: [id_transaction], references: [id])

  @@map("ratings")
}

model Payment {
  id     Int     @id @default(autoincrement())
  status Boolean @default(false)

  id_transaction Int         @unique
  transaction    Transaction @relation("TransactionPayment", fields: [id_transaction], references: [id])

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@map("payments")
}
